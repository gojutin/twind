import{o as n,c as s,a,b as e,t,d as p}from"./app.4ddadaaa.js";const o='{"title":"Grouping Syntax","description":"The Twind compiler provides a terse syntax for grouping related classes together in an intuitive way.","frontmatter":{"title":"Grouping Syntax","editLink":true,"navbar":true,"sidebar":true,"head":[["meta",{"name":"description","content":"The Twind compiler provides a terse syntax for grouping related classes together in an intuitive way."}],["meta",{"name":"keywords","content":"twind tailwind css-in-js"}]]},"headers":[{"level":2,"title":"Thinking in Groups","slug":"thinking-in-groups"},{"level":2,"title":"Directive Grouping","slug":"directive-grouping"},{"level":2,"title":"Variant Grouping","slug":"variant-grouping"},{"level":2,"title":"Mixed Groupings","slug":"mixed-groupings"},{"level":2,"title":"Self Reference","slug":"self-reference"}],"relativePath":"handbook/grouping-syntax.md","lastUpdated":1623699843608}',i={},r={id:"frontmatter-title"},l=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),c=p('<p>Twind is not limited to strings as class names. Twind ships a compiler that runs when your app runs. This is unlike Tailwind, which generates CSS in a build step that is required before you run your app. This compiler is a function that is designed to interpret almost any form: strings, arrays, objects, template literals, or a mix of any of these.</p><p>On common complain of Tailwind (and utility classes) is long and unwieldy class names in markup:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shadow-xl m-auto border-2 border-black border-opacity-50 border-dashed px-4 md:px-6 py-3 md:py-4 space-x-2 md:space-x-4 transform hover:scale-110 hover:rotate-5 animate-pulse absolute top-0 left-0 rounded-full<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>In an effort to help reduce repetition and improve readability, Twind provides a domain specific grouping syntax that can be used in strings or template literals.</p><h2 id="thinking-in-groups"><a class="header-anchor" href="#thinking-in-groups" aria-hidden="true">#</a> Thinking in Groups</h2><p>Take a look at this button implemented in Tailwind. It requires quite a few classes to achieve the desired functionality:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-full sm:w-auto text-lg uppercase text-gray-100 bg-purple-800 hover:bg-purple-700 focus:bg-purple-700 focus-visible:ring-4 ring-purple-400 px-6 py-2 rounded-full transition-colors duration-300<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span>\n  Click Me\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>Let&#39;s see how we can use grouping to improve readability and save a few characters in the process.</p><p><strong>The width classes</strong></p><p>These classes can be grouped using directive grouping:</p><p>Before: <code>w-full sm:w-auto</code></p><p>After: <code>w(full sm:auto)</code></p><p><strong>The text classes</strong></p><p>Twind conveniently provides a <code>text-uppercase</code> class, which allows us to group all of the text-related classes together also using directive grouping:</p><p>Before: <code>text-lg uppercase text-gray-100</code></p><p>After: <code>text(lg uppercase gray-100)</code></p><p><strong>The background classes</strong></p><p>The background classes can be grouped in several combinations. Here are a couple options:</p><ol><li><p>Using a combination of directive and variant (mixed) grouping:</p><p>Before: <code>bg-purple-800 hover:bg-purple-700 focus:bg-purple-700</code></p><p>After: <code>bg(purple-800 hover:purple-700 focus:purple-700)</code></p></li><li><p>Using a combination of mixed grouping and self-referencing:</p><p>Before: <code>bg-purple-800 hover:bg-purple-700 focus:bg-purple-700</code></p><p>After: <code>bg-purple(800 700(hover:&amp; focus:&amp;))</code></p></li></ol><p><strong>The ring classes</strong></p><p>The ring classes can be combined using mixed grouping:</p><p>Before: <code>focus-visible:ring-4 ring-purple-400</code></p><p>After: <code>ring(purple-400 focus-visible:4)</code></p><p>And finally, all together:</p><p>Before</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-full sm:w-auto text-lg uppercase text-gray-100 bg-purple-800 hover:bg-purple-700 focus:bg-purple-700 focus-visible:ring-4 ring-purple-400 px-6 py-2 rounded-full transition-colors duration-300<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span>\n  Click Me\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>After</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w(full sm:auto) text(lg uppercase gray-100) bg-purple(800 700(hover:&amp; focus:&amp;)) ring(purple-400 focus-visible:4)) px-6 py-2 rounded-full transition-colors duration-300<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span>\n  Click Me\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>As you can see, grouping saved a few characters. For some people, the grouped classes may improve readability. Other people may prefer the Tailwind style. Grouping is fully opt-in, highly expressive, and can be used as little or as much as you&#39;d like.</p><h2 id="directive-grouping"><a class="header-anchor" href="#directive-grouping" aria-hidden="true">#</a> Directive Grouping</h2><p>The first grouping syntax works by factoring out common directive prefixes. Below is an example of a rule set without directive grouping and the equivalent rule set with <code>border</code> factored out.</p><div class="language-js"><pre><code><span class="token comment">// Before directive grouping</span>\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">border-2 border-black border-opacity-50 border-dashed</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// After directive grouping</span>\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">border(2 black opacity-50 dashed)</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>This reduced repetition in this rule set by about 20% but the output is still the same!</p><h2 id="variant-grouping"><a class="header-anchor" href="#variant-grouping" aria-hidden="true">#</a> Variant Grouping</h2><p>The second grouping syntax works by factoring out common variants. Both responsive and pseudo variants are supported in various combinations.</p><blockquote><p>Note how rules within tagged template literals are able to span multiple lines</p></blockquote><div class="language-js"><pre><code><span class="token comment">// Before variant grouping</span>\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bg-red-500 shadow-xs sm:bg-red-600 sm:shadow-sm md:bg-red-700 md:shadow lg:bg-red-800 lg:shadow-xl</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// After variant grouping</span>\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  bg-red-500 shadow-xs\n  sm:(\n    bg-red-600\n    shadow-md\n  )\n  md:(bg-red-700 shadow)\n  lg:(bg-red-800 shadow-xl)\n</span><span class="token template-punctuation string">`</span></span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">w(1/2 sm:1/3 lg:1/6) p-2</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; w-1/2 sm:w-1/3 lg:w-1/6 p-2</span>\n</code></pre></div><details><summary>Show me more examples</summary><div class="language-js"><pre><code><span class="token comment">// Grouping across string boundaries</span>\n<span class="token function">tw</span><span class="token punctuation">(</span><span class="token string">&#39;hover:(&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bg-red-500&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;p-3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;m-1&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; hover:bg-red-500 hover:p-3 m-1</span>\n\n<span class="token function">tw</span><span class="token punctuation">(</span><span class="token string">&#39;hover:(bg-red-500&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;p-3)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;m-1&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; hover:bg-red-500 hover:p-3 m-1</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bg-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token string">&#39;red&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(600 700(hover:&amp; focus:&amp;))</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; bg-red-600 hover:bg-red-700 focus:bg-red-700</span>\n</code></pre></div></details><h2 id="mixed-groupings"><a class="header-anchor" href="#mixed-groupings" aria-hidden="true">#</a> Mixed Groupings</h2><p>It is possible to nest directive groups inside of responsive groups and vice versa, however it is important to note that nesting responsive variants inside of responsive variants doesn&#39;t make sense and is not permitted.</p><div class="language-js"><pre><code>tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sm:(border(2 black opacity-50 hover:dashed))</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; sm:border-2 sm:border-black sm:border-opacity-50 sm:hover:border-dashed</span>\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">border(md:(2 black opacity-50 hover:dashed))</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; sm:border-2 sm:border-black sm:border-opacity-50 sm:hover:border-dashed</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">divide(y-2 blue-500 opacity(75 md:50))</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; divide-y-2 divide-blue-500 divide-opacity-75 md:divide-opacity-50</span>\n\n<span class="token comment">// Negated values can be used within the braces and will be applied to the directive:</span>\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rotate(-3 hover:6 md:(3 hover:-6))</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; -rotate-3 hover:rotate-6 md:rotate-3 md:hover:-rotate-6&quot;</span>\n</code></pre></div><p>Thanks to some ordering logic in the compiler, both of the above groupings will result in the same output. That is to say more generally, that directive groupings always get expanded before variant groupings.</p><h2 id="self-reference"><a class="header-anchor" href="#self-reference" aria-hidden="true">#</a> Self Reference</h2><p>Some directives like <code>ring</code> need to be applied themselves as well as being a prefix. In this case you can use the reserved <code>&amp;</code> character which is replaced literally with the current prefix:</p><div class="language-js"><pre><code>tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ring(&amp; pink-700 offset(4 pink-200))</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; ring ring-pink-700 ring-offset-4 ring-offset-pink-200</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bg-blue-500(hover:&amp; focus:&amp; active:&amp;) rounded-full</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; hover:bg-blue-500 focus:bg-blue-500 active:bg-blue-500 rounded-full</span>\n</code></pre></div>',45);i.render=function(p,o,i,u,d,g){return n(),s("div",null,[a("h1",r,[l,e(" "+t(p.$frontmatter.title),1)]),c])};export default i;export{o as __pageData};
