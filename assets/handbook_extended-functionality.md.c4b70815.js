import{r as n,o as a,c as t,a as e,b as s,t as o,d as p}from"./app.4ddadaaa.js";const l='{"title":"Extended Functionality","description":"See a list of all the features of Twind beyond Tailwind","frontmatter":{"title":"Extended Functionality","editLink":true,"navbar":true,"sidebar":true,"head":[["meta",{"name":"description","content":"See a list of all the features of Twind beyond Tailwind"}],["meta",{"name":"keywords","content":"twind tailwind css-in-js"}]]},"headers":[{"level":2,"title":"Variants","slug":"variants"},{"level":2,"title":"Utilities","slug":"utilities"},{"level":2,"title":"Extension Packages","slug":"extension-packages"},{"level":2,"title":"Syntax","slug":"syntax"},{"level":2,"title":"Extension Packages","slug":"extension-packages-2"}],"relativePath":"handbook/extended-functionality.md","lastUpdated":1623699843608}',c={},i={id:"frontmatter-title"},r=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=p('<p>Tailwind provides a comprehensive list of variants and utility classes. Twind supports all Tailwind variants/classes, and we&#39;ve added a few more for your convenience.</p><h2 id="variants"><a class="header-anchor" href="#variants" aria-hidden="true">#</a> Variants</h2><p>Variants are special keywords recognized by the compiler used to apply styles to HTML element(s) based on pseudo states, viewport sizes, dark mode, or other states. Variants are used by prefixing class names or groupings and are denoted with a trailing colon. (e.g. <code>md:text-blue-500</code> or <code>md:(text-blue-500)</code>)</p><p>Tailwind provides a default configuration, and requires that you explicitly associate certain variants to styles as you need them. This is not the case with Twind. Twind support all Tailwind variants out of the box with no configuration required.</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-blue-500 md:text-red-500<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello Twind!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h4 id="every-variant-can-be-applied-to-every-directive"><a class="header-anchor" href="#every-variant-can-be-applied-to-every-directive" aria-hidden="true">#</a> Every variant can be applied to every directive</h4><p>Because Twind is generating CSS during runtime there is no to need restrict the usage of variants.</p><h4 id="dark-mode-is-always-available"><a class="header-anchor" href="#dark-mode-is-always-available" aria-hidden="true">#</a> Dark mode is always available</h4><p><a href="/handbook/configuration.html#dark-mode">View docs for dark mode</a></p><h4 id="most-pseudo-classes-can-be-used-as-variant-or-group-variant"><a class="header-anchor" href="#most-pseudo-classes-can-be-used-as-variant-or-group-variant" aria-hidden="true">#</a> Most pseudo classes can be used as variant or <code>group-*</code> variant</h4><p>Unknown variants (not listed in <a href="https://github.com/tw-in-js/twind/blob/main/src/twind/variants.ts" target="_blank" rel="noopener noreferrer">core variants</a>) are assumed to be <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes" target="_blank" rel="noopener noreferrer">pseudo classes</a>.</p><p><em>Advanced</em> pseudo classes (those that take parameters like <code>:is(header)</code>) are not supported out of the box as they use <code>(...)</code> which is parsed as a variant or directive. You can define an alias for those in your <a href="./configuration.html">configuration</a>:</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  variants<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;is-header&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;:is(header)&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">is-header:font-bold</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; .is-header\\:font-bold:is(header) { ... }</span>\n</code></pre></div><blockquote><p>ðŸ™‹ If you have an idea how we could support these within the parser please <a href="https://github.com/tw-in-js/twind/issues" target="_blank" rel="noopener noreferrer">open an issue</a> for discussions.</p></blockquote><h4 id="negating-styles-with-the-not-pseudo-class-prefix"><a class="header-anchor" href="#negating-styles-with-the-not-pseudo-class-prefix" aria-hidden="true">#</a> Negating styles with the <code>not-</code> pseudo-class prefix.</h4><p>Most Twind rules can be prefixed with the <code>not-</code>prefix, which represents a non-match to the rule. For instance, <code>not-hover:uppercase</code> would apply the uppercase style any time the element is not being hovered.</p><p>Here are some other examples using the <code>not-</code> prefix, with the derived CSS selector:</p><table><thead><tr><th>Class name</th><th>Selector</th></tr></thead><tbody><tr><td>not-focus:invalid:border-red-500</td><td>.not-focus\\:invalid\\:border-red-500:not(:focus):invalid</td></tr><tr><td>invalid:not-focus:border-red-500</td><td>.invalid\\:not-focus\\:border-red-500:invalid:not(:focus)</td></tr><tr><td>not-disabled:focus:font-bold</td><td>.not-disabled\\:focus\\:font-bold:not(:disabled):focus</td></tr><tr><td>not-last-child:mb-5</td><td>.not-last-child\\:mb-5:not(:last-child)</td></tr></tbody></table><p>Core and user defined variants are not expanded and stay as is:</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  variants<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;not-logged-in&#39;</span><span class="token operator">:</span> <span class="token string">&#39;body:not(.logged-in) &amp;&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">not-logged-in:hidden</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; `body:not(.logged-in) .not-logged-in\\\\:hidden`</span>\n</code></pre></div><h4 id="named-groups-to-support-nested-groups"><a class="header-anchor" href="#named-groups-to-support-nested-groups" aria-hidden="true">#</a> Named groups to support nested groups</h4><p>Named groups allow to nest groups within each other and target specific groups by their name. The group names are ad-hoc meaning there is no special configuration required.</p><p>Here is an example using the shim</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>group-x bg-white hover:bg-blue-500 ...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-gray-900 group-x-hover:text-white ...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>New Project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>group-y bg-gray-100 hover:bg-green-500 ...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-gray-500 group-y-hover:text-white ...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      Create a new project from a variety of starting templates.\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h4 id="pseudo-elements-are-supported-using-double-colon"><a class="header-anchor" href="#pseudo-elements-are-supported-using-double-colon" aria-hidden="true">#</a> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements" target="_blank" rel="noopener noreferrer">Pseudo Elements</a> are supported using double colon</h4><p>Pseudo Elements can be used and are identified by a double colon:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>first-line::(uppercase text-blue-500)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  Styles will only be applied to the first line of this paragraph. After that, all text will be\n  styled like normal. See what I mean?\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><code>::before</code> and <code>::after</code> are often used together with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/content" target="_blank" rel="noopener noreferrer">content property</a>. The <a href="https://github.com/tw-in-js/twind-content" target="_blank" rel="noopener noreferrer">@twind/content</a> extension helps in these cases:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@twind/content&#39;</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;âœ…&quot;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; .tw-xxxx { content: &quot;âœ…&quot; }</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">before::</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;âœ…&quot;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; .tw-xxxx::before { content: &quot;âœ…&quot; }</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">before::</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">&#39;attr(data-content)&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; .tw-xxxx::before { content: attr(data-content) }</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">after::</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">&#39;&quot; (&quot; attr(href) &quot; )&quot;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; .tw-xxxx::after { content: &quot; (&quot; attr(href) &quot; )&quot; }</span>\n</code></pre></div><blockquote><p>ðŸ’¡ Please a look at the documentation of <a href="https://github.com/tw-in-js/twind-content" target="_blank" rel="noopener noreferrer">@twind/content</a> for more examples.</p></blockquote><h4 id="siblings-general-sibling-combinator"><a class="header-anchor" href="#siblings-general-sibling-combinator" aria-hidden="true">#</a> <code>siblings:*</code> - General sibling combinator (<code>&amp; ~ *</code>)</h4><p>Matches elements that are following the element this is applied on (though not necessarily immediately), and are children of the same parent element (<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/General_sibling_combinator" target="_blank" rel="noopener noreferrer">MDN - General sibling combinator</a>).</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is not red.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>siblings:text-red-500<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Here is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>And here is a red paragraph!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>And this is a red paragraph!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',33),u=p('<h4 id="sibling-adjacent-sibling-combinator"><a class="header-anchor" href="#sibling-adjacent-sibling-combinator" aria-hidden="true">#</a> <code>sibling:*</code> - Adjacent sibling combinator (<code>&amp; + *</code>)</h4><p>Matches the element that immediately follows the element this is applied on, and is a children of the same parent element (<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator" target="_blank" rel="noopener noreferrer">MDN - Adjacent sibling combinator</a>).</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is not red.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sibling:text-red-500<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Here is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>And here is a red paragraph!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is not red!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',3),g=p('<h4 id="children-child-combinator"><a class="header-anchor" href="#children-child-combinator" aria-hidden="true">#</a> <code>children:*</code> - Child combinator (<code>&amp; &gt; *</code>)</h4><p>Matches direct children of the element this is applied on (<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator" target="_blank" rel="noopener noreferrer">MDN - Child combinator</a>).</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>children:(border my-2)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This paragraph has <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>emphasized text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> in it.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This paragraph has <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>emphasized text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> in it.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',3),h=p('<p>Please note that <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance" target="_blank" rel="noopener noreferrer">some CSS properties are inherited</a> and therefore all children will have those styles applied. Here is an (<em>incomplete</em>) list of directives that use <a href="https://stackoverflow.com/questions/5612302/which-css-properties-are-inherited" target="_blank" rel="noopener noreferrer">inherited CSS properties</a> where the style would be inherited by all children and not only the direct children:</p><ul><li><code>border-collapse</code></li><li><code>border-separate</code></li><li><code>cursor-*</code></li><li><code>font-*</code></li><li><code>invisible</code></li><li><code>leading-*</code></li><li><code>list-*</code></li><li><code>text-*</code></li><li><code>tracking-*</code></li><li><code>visible</code></li><li><code>whitespace-*</code></li></ul><blockquote><p>ðŸ™‹ If you find any incorrect or missing directive then please <a href="https://github.com/tw-in-js/twind/issues" target="_blank" rel="noopener noreferrer">open an issue</a>.</p></blockquote><h4 id="override-increase-the-specificity-of-rules"><a class="header-anchor" href="#override-increase-the-specificity-of-rules" aria-hidden="true">#</a> <code>override:*</code> - Increase the specificity of rules</h4><p>When using components that have some default styles it happens that one wants to override a rule. Consider the following example:</p><div class="language-js"><pre><code><span class="token keyword">const</span> shared <span class="token operator">=</span> tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text(xl center blue-600) underline</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">const</span> special <span class="token operator">=</span> tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>shared<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> text-purple-600 no-underline</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; text-xl text-center text-blue-600 underline text-purple-600 no-underline</span>\n</code></pre></div><p>One can not be sure that the <code>text-purple-600</code> would be correctly applied as the order of classes does not matter. Only the <a href="https://specificity.keegan.st/" target="_blank" rel="noopener noreferrer">specificity</a>.</p><p>To support these cases Twind includes the <code>override</code> variant which uses a little trick to increase the specificity: <code>.class-name.class-name</code> is more specific than just <code>.class-name</code></p><p>The above example should be re-written to:</p><div class="language-js"><pre><code><span class="token keyword">const</span> shared <span class="token operator">=</span> tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text(xl center blue-600) underline</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">const</span> special <span class="token operator">=</span> tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>shared<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> override:(text-purple-600 no-underline)</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div>',10),k=p('<h2 id="utilities"><a class="header-anchor" href="#utilities" aria-hidden="true">#</a> Utilities</h2><h4 id="arbitrary-style-values-using-square-bracket-syntax"><a class="header-anchor" href="#arbitrary-style-values-using-square-bracket-syntax" aria-hidden="true">#</a> Arbitrary style values using square bracket syntax</h4><p>While not generally recommended, there are times when you will need to break out of the Twind constraints for one-off styles like a slight rotation, relative positioning, custom font size, etc. Twind provides a square bracket syntax, which allows you to define these arbitrary styles without ever leaving your HTML:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>relative -top-[-8px]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello Twind!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Square bracket syntax will work almost anywhere that you could apply a theme value, including with variants: <code>md:top-[-80px]</code></p></div><p>Here are some other examples of using the square bracket syntax to provide arbitrary CSS values:</p><div class="language-"><pre><code>bg-[#0f0]\nbg-[#ff0000]\nbg-[#0000ffcc]\nbg-[hsl(0,100%,50%)]\nbg-[hsla(0,100%,50%,0.3)]\nbg-[rgb(123,123,123)]\nbg-[rgba(123,123,123,var(--tw-bg-opacity))]\nbg-opacity-[0.11]\nborder-[#f00]\nborder-[2.5px]\nduration-[2s]\ngrid-cols-[200px,repeat(auto-fill,minmax(15%,100px)),300px]\ngrid-cols-[minmax(100px,max-content)repeat(auto-fill,200px)20%]\ngrid-cols-[repeat(auto-fit,minmax(150px,1fr))]\nflex-[30%]\nring-[#1da1f2]\nring-[7px]\nring-offset-[#1da1f2]\nring-offset-[7px]\nrotate-[0.5turn]\nrotate-[23deg]\nrotate-[2.3rad]\nrotate-[401grad]\nrotate-[1.5turn]\nrounded-[33%]\nscale-[2]\nscale-x-[1.15]\nskew-[30deg]\nskew-x-[1.07rad]\nspace-x-[20cm]\nspace-x-[calc(20%-1cm)]\ntext-[#1da1f2]\ntext-[2.23rem]\ntext-[6px]\ntext-[calc(1vw+1vh+.5vmin)]\ntop-[-123px]\ntop-[123px]\ntransition-[font-size,color,width]\ntranslate-[3in]\ntranslate-y-[2px]\nw-[3.23rem]\nw-[calc(100%+1rem)]\nw-[clamp(23ch,50%,46ch)]\n</code></pre></div><h4 id="some-directives-support-all-css-values"><a class="header-anchor" href="#some-directives-support-all-css-values" aria-hidden="true">#</a> Some directives support all CSS values</h4><ul><li><code>align-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align" target="_blank" rel="noopener noreferrer">vertical-align</a></li><li><code>appearance-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/appearance" target="_blank" rel="noopener noreferrer">appearance</a></li><li><code>clear-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clear" target="_blank" rel="noopener noreferrer">clear</a></li><li><code>cursor-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/cursor" target="_blank" rel="noopener noreferrer">cursor</a></li><li><code>float-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float" target="_blank" rel="noopener noreferrer">float</a></li><li><code>list-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type" target="_blank" rel="noopener noreferrer">list-style-type</a></li><li><code>object-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/object-position" target="_blank" rel="noopener noreferrer">object-position</a>; using a dash as separator: <code>object-right-top</code></li><li><code>origin-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin" target="_blank" rel="noopener noreferrer">transform-origin</a>; using a dash as separator: <code>origin-top-left</code></li><li><code>overflow-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow" target="_blank" rel="noopener noreferrer">overflow</a></li><li><code>pointer-events-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events" target="_blank" rel="noopener noreferrer">pointer-events</a></li><li><code>select-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/user-select" target="_blank" rel="noopener noreferrer">user-select</a></li><li><code>whitespace-*</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/white-space" target="_blank" rel="noopener noreferrer">white-space</a></li></ul><h4 id="text-underline-text-uppercase"><a class="header-anchor" href="#text-underline-text-uppercase" aria-hidden="true">#</a> <code>text-underline</code>, <code>text-uppercase</code>, ...</h4><p>This allows grouping of text directives: <code>text(lg red-500 capitalize underline)</code></p><ul><li><code>text-underline</code></li><li><code>text-no-underline</code></li><li><code>text-line-through</code></li><li><code>text-uppercase</code></li><li><code>text-lowercase</code></li><li><code>text-capitalize</code></li></ul><h4 id="font-italic-and-font-no-italic"><a class="header-anchor" href="#font-italic-and-font-no-italic" aria-hidden="true">#</a> <code>font-italic</code> and <code>font-no-italic</code></h4><p>This allows grouping of font directives: <code>font(sans italic bold)</code></p><ul><li><code>font-italic</code></li><li><code>font-no-italic</code></li></ul><h4 id="bg-gradient-to-is-built-in"><a class="header-anchor" href="#bg-gradient-to-is-built-in" aria-hidden="true">#</a> <code>bg-gradient-to-*</code> is built-in</h4><p>Every permutation of <code>t</code>op, <code>r</code>ight, <code>l</code>eft, and <code>b</code>ottom is handled by twind (like <code>bg-gradient-to-tr</code>). You can add new gradients but they should not use one of those keys:</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">backgroundImage</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">theme</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token comment">// Use a own gradient</span>\n        <span class="token string">&#39;gradient-radial&#39;</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">radial-gradient(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.blue.500&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">theme</span><span class="token punctuation">(</span>\n          <span class="token string">&#39;colors.red.500&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token comment">// Integrate with gradient colors stops (from-*, via-*, to-*)</span>\n        <span class="token string">&#39;gradient-15&#39;</span><span class="token operator">:</span>\n          <span class="token string">&#39;linear-gradient(.15turn, var(--tw-gradient-stops,var(--tw-gradient-from,transparent),var(--tw-gradient-to,transparent)))&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bg-gradient-radial</span><span class="token template-punctuation string">`</span></span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bg-gradient-15 from-green-400 to-blue-500</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div>',18),m=p('<h4 id="border-and-divide-allow-to-combine-positions"><a class="header-anchor" href="#border-and-divide-allow-to-combine-positions" aria-hidden="true">#</a> <code>border</code> and <code>divide</code> allow to combine positions</h4><p>Every permutation of <code>t</code>op, <code>r</code>righ, <code>l</code>eft, and <code>b</code>ottom is allowed:</p><ul><li><code>tr</code> - <code>top</code> &amp; <code>right</code></li><li><code>brl</code> - <code>bottom</code>, <code>right</code> and <code>left</code></li></ul><blockquote><p>ðŸ’¡ <code>x</code> and <code>y</code> can not be combined.</p></blockquote><h4 id="rotate-scale-skew-and-translate-provide-a-fallback-for-ie-11"><a class="header-anchor" href="#rotate-scale-skew-and-translate-provide-a-fallback-for-ie-11" aria-hidden="true">#</a> <code>rotate</code>, <code>scale</code> , <code>skew</code> and <code>translate</code> provide a fallback for IE 11</h4><p>Please note that <code>transform rotate-45</code> works but when using <code>transform rotate-45 scale-150</code> only one of both is applied.</p><h4 id="theme-values-are-automatically-negated"><a class="header-anchor" href="#theme-values-are-automatically-negated" aria-hidden="true">#</a> Theme values are automatically negated</h4><p>There is no need to provided negated values in the theme. As soon as Twind detects a negated directive like <code>-mx-2</code> it negates the theme value.</p><h2 id="extension-packages"><a class="header-anchor" href="#extension-packages" aria-hidden="true">#</a> Extension Packages</h2><ul><li><a href="https://github.com/tw-in-js/twind-aspect-ratio" target="_blank" rel="noopener noreferrer">@twind/aspect-ratio</a>: a composable API for giving elements a fixed aspect ratio</li><li><a href="https://github.com/tw-in-js/twind-content" target="_blank" rel="noopener noreferrer">@twind/content</a>: a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/content" target="_blank" rel="noopener noreferrer">CSS content property</a> directive</li><li><a href="https://github.com/tw-in-js/twind-forms" target="_blank" rel="noopener noreferrer">@twind/forms</a>: a basic reset for form styles that makes form elements easy to override with utilities</li><li><a href="https://github.com/tw-in-js/twind-line-clamp" target="_blank" rel="noopener noreferrer">@twind/line-clamp</a>: utilities for visually truncating text after a fixed number of lines</li><li><a href="https://github.com/tw-in-js/typography" target="_blank" rel="noopener noreferrer">@twind/typography</a>: a set of <code>prose</code> classes you can use to add beautiful typographic defaults to any vanilla HTML you don&#39;t control (like HTML rendered from Markdown, or pulled from a CMS).</li></ul><p>While Twind strives to maintain feature parity with Tailwind, we&#39;ve added several variants, directives, and utilities for your convenience. This document includes a complete list of all features beyond Tailwind that Twind has to offer with links to the corresponding documentation.</p><h2 id="syntax"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h2><ul><li>Custom grouping syntax for directives and variants <a href="./grouping-syntax.html">View Docs</a></li><li>Overwrite styles with the <code>important!</code> directive <a href="./overwriting-styles.html">View Docs</a></li></ul><h2 id="extension-packages-2"><a class="header-anchor" href="#extension-packages-2" aria-hidden="true">#</a> Extension Packages</h2><ul><li><a href="https://github.com/tw-in-js/twind-aspect-ratio" target="_blank" rel="noopener noreferrer">@twind/aspect-ratio</a>: a composable API for giving elements a fixed aspect ratio</li><li><a href="https://github.com/tw-in-js/twind-content" target="_blank" rel="noopener noreferrer">@twind/content</a>: a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/content" target="_blank" rel="noopener noreferrer">CSS content property</a> directive</li><li><a href="https://github.com/tw-in-js/twind-forms" target="_blank" rel="noopener noreferrer">@twind/forms</a>: a basic reset for form styles that makes form elements easy to override with utilities</li><li><a href="https://github.com/tw-in-js/twind-line-clamp" target="_blank" rel="noopener noreferrer">@twind/line-clamp</a>: utilities for visually truncating text after a fixed number of lines</li><li><a href="https://github.com/tw-in-js/typography" target="_blank" rel="noopener noreferrer">@twind/typography</a>: a set of <code>prose</code> classes you can use to add beautiful typographic defaults to any vanilla HTML you don&#39;t control (like HTML rendered from Markdown, or pulled from a CMS).</li></ul>',15);c.render=function(p,l,c,b,f,w){const v=n("DemoLink");return a(),t("div",null,[e("h1",i,[r,s(" "+o(p.$frontmatter.title),1)]),d,e(v,{href:"https://esm.codes/#aW1wb3J0ICdodHRwczovL2Nkbi5za3lwYWNrLmRldi90d2luZC9zaGltJwoKZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBgCiAgPHA+VGhpcyBpcyBub3QgcmVkLjwvcD4KICA8cCBjbGFzcz0ic2libGluZ3M6dGV4dC1yZWQtNTAwIj5IZXJlIGlzIGEgcGFyYWdyYXBoLjwvcD4KICA8cD5BbmQgaGVyZSBpcyBhIHJlZCBwYXJhZ3JhcGghPC9wPgogIDxwPkFuZCB0aGlzIGlzIGEgcmVkIHBhcmFncmFwaCE8L3A+CmA="}),u,e(v,{href:"https://esm.codes/#aW1wb3J0ICdodHRwczovL2Nkbi5za3lwYWNrLmRldi90d2luZC9zaGltJwoKZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBgCiAgPHA+VGhpcyBpcyBub3QgcmVkLjwvcD4KICA8cCBjbGFzcz0ic2libGluZzp0ZXh0LXJlZC01MDAiPkhlcmUgaXMgYSBwYXJhZ3JhcGguPC9wPgogIDxwPkFuZCBoZXJlIGlzIGEgcmVkIHBhcmFncmFwaCE8L3A+CiAgPHA+VGhpcyBpcyBub3QgcmVkITwvcD4KYA=="}),g,e(v,{href:"https://esm.codes/#aW1wb3J0ICdodHRwczovL2Nkbi5za3lwYWNrLmRldi90d2luZC9zaGltJwoKZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBgCiAgPHA+VGhpcyBpcyBub3QgcmVkLjwvcD4KICA8cCBjbGFzcz0ic2libGluZ3M6dGV4dC1yZWQtNTAwIj5IZXJlIGlzIGEgcGFyYWdyYXBoLjwvcD4KICA8cD5BbmQgaGVyZSBpcyBhIHJlZCBzcGFuITwvcD4KICA8cD5BbmQgdGhpcyBpcyBhIHJlZCBzcGFuITwvcD4KYA=="}),h,e(v,{href:"https://esm.codes/#aW1wb3J0IHsgdHcgfSBmcm9tICdodHRwczovL2Nkbi5za3lwYWNrLmRldi90d2luZCcKCmNvbnN0IHNoYXJlZCA9IHR3YHRleHQoeGwgY2VudGVyIGJsdWUtNjAwKSB1bmRlcmxpbmVgCmNvbnN0IHNwZWNpYWwgPSB0d2Ake3NoYXJlZH0gb3ZlcnJpZGU6KHRleHQtcHVycGxlLTYwMCBuby11bmRlcmxpbmUpYAoKZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBgCiAgPHAgY2xhc3M9IiR7c2hhcmVkfSI+Q29tbW9uIFN0eWxlczwvcD4KICA8cCBjbGFzcz0iJHtzcGVjaWFsfSI+U3BlY2lhbCBTdHlsZXM8L3A+CmAK"}),k,e(v,{href:"https://esm.codes/#aW1wb3J0IHsgc2V0dXAgfSBmcm9tICdodHRwczovL2Nkbi5za3lwYWNrLmRldi90d2luZC9zaGltJwoKc2V0dXAoewogIHRoZW1lOiB7CiAgICBleHRlbmQ6IHsKICAgICAgYmFja2dyb3VuZEltYWdlOiAodGhlbWUpID0+ICh7CiAgICAgICAgLy8gVXNlIGEgb3duIGdyYWRpZW50CiAgICAgICAgJ2dyYWRpZW50LXJhZGlhbCc6IGByYWRpYWwtZ3JhZGllbnQoJHt0aGVtZSgnY29sb3JzLmJsdWUuNTAwJyl9LCAke3RoZW1lKCdjb2xvcnMucmVkLjUwMCcpfSk7YCwKICAgICAgICAvLyBJbnRlZ3JhdGUgd2l0aCBncmFkaWVudCBjb2xvcnMgc3RvcHMgKGZyb20tKiwgdmlhLSosIHRvLSopCiAgICAgICAgJ2dyYWRpZW50LTE1JzogJ2xpbmVhci1ncmFkaWVudCguMTV0dXJuLCB2YXIoLS10dy1ncmFkaWVudC1zdG9wcyx2YXIoLS10dy1ncmFkaWVudC1mcm9tLHRyYW5zcGFyZW50KSx2YXIoLS10dy1ncmFkaWVudC10byx0cmFuc3BhcmVudCkpKScsCiAgICAgIH0pCiAgICB9LAogIH0sCn0pCmRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gYAogIDxkaXYgY2xhc3M9ImNoaWxkcmVuOihoLTMyIG15LTQpIj4KICAgIDxkaXYgY2xhc3M9ImJnLWdyYWRpZW50LXJhZGlhbCI+PC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJiZy1ncmFkaWVudC0xNSBmcm9tLWdyZWVuLTQwMCB0by1ibHVlLTUwMCI+PC9kaXY+CiAgPC9kaXY+CmAK"}),m])};export default c;export{l as __pageData};
