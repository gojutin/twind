import{o as n,c as s,a,b as t,t as e,d as o}from"./app.4ddadaaa.js";const p='{"title":"Configuration and Theming","description":"How to configure Twind into your project.","frontmatter":{"title":"Configuration and Theming","editLink":true,"navbar":true,"sidebar":true,"head":[["meta",{"name":"description","content":"How to configure Twind into your project."}],["meta",{"name":"keywords","content":"twind tailwind css-in-js"}]]},"headers":[{"level":2,"title":"Theme","slug":"theme"},{"level":2,"title":"Preflight","slug":"preflight"},{"level":2,"title":"Custom fonts and imports","slug":"custom-fonts-and-imports"},{"level":2,"title":"Mode","slug":"mode"},{"level":2,"title":"Hash","slug":"hash"},{"level":2,"title":"Dark Mode","slug":"dark-mode"},{"level":2,"title":"Sheet","slug":"sheet"},{"level":2,"title":"Plugins","slug":"plugins"},{"level":2,"title":"Variants","slug":"variants"}],"relativePath":"handbook/configuration.md","lastUpdated":1623699843608}',c={},l={id:"frontmatter-title"},i=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),u=o('<p>Twind offers configuration and theming options via a <code>setup</code> function. The <code> setup</code> function is a named export of the <code>twind</code> module and accepts a configuration object as an argument.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>setup</code> function is not required to use Twind. If used, it must be called before any <code>tw</code> calls.</p></div><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup<span class="token punctuation">,</span> strict<span class="token punctuation">,</span> voidSheet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  preflight<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// do not include base style reset (default: use tailwind preflight)</span>\n  mode<span class="token operator">:</span> strict<span class="token punctuation">,</span> <span class="token comment">// throw errors for invalid rules (default: warn)</span>\n  hash<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// hash all generated class names (default: false)</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// define custom theme values (default: tailwind theme)</span>\n  darkMode<span class="token operator">:</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token comment">// use a different dark mode strategy (default: &#39;media&#39;)</span>\n  sheet<span class="token operator">:</span> voidSheet<span class="token punctuation">,</span> <span class="token comment">// use custom sheet (default: cssomSheet in a browser or no-op)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="theme"><a class="header-anchor" href="#theme" aria-hidden="true">#</a> Theme</h2><p>For maximum compatibility and ease of adoption, theming in Twind works exactly the same as <a href="https://tailwindcss.com/docs/theme" target="_blank" rel="noopener noreferrer">theming in Tailwind</a>.</p><p>Here is an example of overriding and extending values in the theme:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    fontFamily<span class="token operator">:</span> <span class="token punctuation">{</span>\n      sans<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Helvetica&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sans-serif&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      serif<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Times&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;serif&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n      spacing<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token number">128</span><span class="token operator">:</span> <span class="token string">&#39;32rem&#39;</span><span class="token punctuation">,</span>\n        <span class="token number">144</span><span class="token operator">:</span> <span class="token string">&#39;36rem&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="colors"><a class="header-anchor" href="#colors" aria-hidden="true">#</a> Colors</h4><p>The Tailwind v2 <a href="https://tailwindcss.com/docs/customizing-colors#color-palette-reference" target="_blank" rel="noopener noreferrer">extended color palette</a> is available in the <a href="/api/modules/twind_colors.html"><code>twind/colors</code></a> module.</p><p>List of colors: <code>amber</code>,<code>black</code>,<code>blue</code>,<code>blueGray</code> ,<code>coolGray</code>,<code>cyan</code>,<code>emerald</code>,<code>fuchsia</code>,<code>gray</code>,<code>green</code>,<code>indigo</code>,<code>lightBlue</code>,<code>lime</code>,<code>orange</code>,<code>pink</code>,<code>purple</code>,<code>red</code>,<code>rose</code>,<code>teal</code>,<code>trueGray</code>,<code>violet</code>,<code>warmGray</code>,<code>white</code>, <code>yellow</code></p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> colors <span class="token keyword">from</span> <span class="token string">&#39;twind/colors&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    colors<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Build your palette here</span>\n      gray<span class="token operator">:</span> colors<span class="token punctuation">.</span>trueGray<span class="token punctuation">,</span>\n      red<span class="token operator">:</span> colors<span class="token punctuation">.</span>red<span class="token punctuation">,</span>\n      blue<span class="token operator">:</span> colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span>\n      yellow<span class="token operator">:</span> colors<span class="token punctuation">.</span>amber<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>To extend the existing color palette use <code>theme.extend</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> colors <span class="token keyword">from</span> <span class="token string">&#39;twind/colors&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n      colors<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="referencing-theme-values"><a class="header-anchor" href="#referencing-theme-values" aria-hidden="true">#</a> Referencing theme values</h4><p>If you need to reference another theme value, you can do so by providing a function instead of a static value. The function will receive a <code>theme()</code> function as an argument that you can use to look up other values in your theme.</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">fill</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">theme</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="preflight"><a class="header-anchor" href="#preflight" aria-hidden="true">#</a> Preflight</h2><p>To smooth over browser inconsistencies, Twind provides the same <a href="https://tailwindcss.com/docs/preflight" target="_blank" rel="noopener noreferrer">opinionated modern reset</a> provided by Tailwind. By default, the base reset styles will be injected into the head of the document before any other rules.</p><p>Preflight can be configured in the <code>setup</code> function.</p><p>Disable preflight:</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  preflight<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Customize preflight be providing a function that returns an object:</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// context: tw, theme and, tag functions</span>\n  <span class="token function-variable function">preflight</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">preflight<span class="token punctuation">,</span> <span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span>preflight<span class="token punctuation">,</span>\n    h2<span class="token operator">:</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token string">&#39;dodgerblue&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>You can also use the <a href="/api/modules/twind.html#apply-function"><code>apply</code></a> function to apply Twind rules:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> apply<span class="token punctuation">,</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  preflight<span class="token operator">:</span> <span class="token punctuation">{</span>\n    body<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bg-gray-900 text-white</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    h1<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text(gray-800 uppercase)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// Grouping syntax</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>You can use the <a href="/api/modules/twind_css.html#css-function"><code>css</code></a> function to merge rules:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> theme<span class="token punctuation">,</span> apply <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css#css_directive&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">preflight</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">preflight</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token function">css</span><span class="token punctuation">(</span>\n      preflight<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        body<span class="token operator">:</span> <span class="token punctuation">{</span>\n          backgroundColor<span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.gray.900&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> body<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-gray-100</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Or using template literal:</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">preflight</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">preflight</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>preflight<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    body {\n      background-color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.gray.900&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;\n      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-gray-100</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    }\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="custom-fonts-and-imports"><a class="header-anchor" href="#custom-fonts-and-imports" aria-hidden="true">#</a> Custom fonts and imports</h2><p>Preflight includes two special keys, <code>@font-face</code> and <code>@import</code>:</p><p><code>@import</code> allows you to import external style sheets.</p><p><code>@font-face</code> allows you to declare font faces.</p><p>In the example below, we are using <code>@font-face</code> and <code>@import</code> together to import and declare font faces, which are used to extend the <code>sans</code> font family theme value:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n      fontFamily<span class="token operator">:</span> <span class="token punctuation">{</span>\n        sans<span class="token operator">:</span> <span class="token string">&#39;Roboto, sans-serif&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;proxima-nova&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&quot;Proxima Nova&quot;&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  preflight<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Import external stylesheet</span>\n    <span class="token string">&#39;@import&#39;</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">url(&#39;https://fonts.googleapis.com/css2?amily=Roboto:ital,wght@0,400;0,700;1,400&amp;display=swap&#39;)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token comment">// Declare font face</span>\n    <span class="token string">&#39;@font-face&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        fontFamily<span class="token operator">:</span> <span class="token string">&#39;Proxima Nova&#39;</span><span class="token punctuation">,</span>\n        fontWeight<span class="token operator">:</span> <span class="token string">&#39;400&#39;</span><span class="token punctuation">,</span>\n        src<span class="token operator">:</span> <span class="token string">&#39;url(/fonts/proxima-nova/400-regular.woff) format(&quot;woff&quot;)&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        fontFamily<span class="token operator">:</span> <span class="token string">&#39;Proxima Nova&#39;</span><span class="token punctuation">,</span>\n        fontWeight<span class="token operator">:</span> <span class="token string">&#39;500&#39;</span><span class="token punctuation">,</span>\n        src<span class="token operator">:</span> <span class="token string">&#39;url(/fonts/proxima-nova/500-medium.woff) format(&quot;woff&quot;)&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="mode"><a class="header-anchor" href="#mode" aria-hidden="true">#</a> Mode</h2><p>One benefit of doing compilation at runtime is that it is possible to warn developers about errors such as:</p><ul><li>Unknown directive: warn when an unrecognized rule is encountered</li><li>Missing theme values: warn when a unknown theme value is encountered</li></ul><p>By default, these kind of warnings will be surfaced in the developer console but will not cause the program to throw an error and crash.</p><p>However, sometimes throwing an error might be desirable. For example, during testing or continuous integrations.</p><p>To force the program to error instead of warn set <code>mode</code> to <code>strict</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup<span class="token punctuation">,</span> strict <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> strict<span class="token punctuation">,</span> <span class="token comment">// Throw errors for invalid rules instead of logging</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>To ignore all warnings set the <code>mode</code> to <code>silent</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup<span class="token punctuation">,</span> silent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> silent<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><blockquote><p>💡 If you are using JSON configuration the modes can be set using strings: <code>&quot;strict&quot;</code>, <code>&quot;warn&quot;</code> or <code>&quot;silent&quot;</code>.</p></blockquote><h2 id="hash"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> Hash</h2><p>Most CSS-in-JS solutions, such as styled components or emotion will create hashed class names for rule sets. This makes sense because there is no logical way of naming an arbitrary set of styles. Doing this makes less sense when using an utility class approach because directives are usually carefully named.</p><p>By default, rules that are passed into the <code>tw</code> function are not hashed. This helps retain the advantage of using utility classes, aiding inspection and debugging.</p><p>To enable hashing of class names set <code>hash</code> to <code>true</code>.</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hash<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Alternatively a custom hash function can be provided:</p><div class="language-js"><pre><code><span class="token keyword">import</span> hash <span class="token keyword">from</span> <span class="token string">&#39;@emotion/hash&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">hash</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;tw-&#39;</span> <span class="token operator">+</span> <span class="token function">hash</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="dark-mode"><a class="header-anchor" href="#dark-mode" aria-hidden="true">#</a> Dark Mode</h2><p>Now that dark mode is a first-class feature of many operating systems, it&#39;s becoming more and more common to design a dark version of your website to go along with the default design.</p><p>To make this as easy as possible, Twind includes a dark variant that lets you style your site differently when dark mode is enabled:</p><div class="language-js"><pre><code>tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  bg-white text-black\n  dark:(bg-gray-800 text-white)</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><blockquote><p>💡 It&#39;s important to note that the dark mode variant is <strong>always</strong> enabled and available for all directives.</p></blockquote><p>Now whenever dark mode is enabled on the user&#39;s operating system, <code>dark:{directive}</code> rules will take precedence over unprefixed rules. The <code>media</code> strategy uses the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme" target="_blank" rel="noopener noreferrer">prefers-color-scheme media feature</a> under the hood, but if you&#39;d like to support toggling dark mode manually, you can also use the <code>class</code> strategy which uses adds a <code>.dark</code> class selector for more control:</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  darkMode<span class="token operator">:</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token comment">// default is &#39;media&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>For an example how to toggle dark mode manually read the <a href="https://tailwindcss.com/docs/dark-mode#toggling-dark-mode-manually" target="_blank" rel="noopener noreferrer">Tailwind Guide</a>.</p><h2 id="sheet"><a class="header-anchor" href="#sheet" aria-hidden="true">#</a> Sheet</h2><p>Twind collects generated CSS rules in sheet to make theme available to the environment. By default Twind uses a speedy (CSSOM) implementation when running in the browser. On the server a no-op implementation is used.</p><h4 id="cssom-sheet"><a class="header-anchor" href="#cssom-sheet" aria-hidden="true">#</a> CSSOM Sheet</h4><blockquote><p>💡 This is the default implementation in browser environments.</p></blockquote><p>If the <code>cssomSheet</code> is passed no <code>target</code> it looks for an style element with the id <code>__twind</code>. If no such element is found it will create one and append it to the <code>document.head</code>.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup<span class="token punctuation">,</span> cssomSheet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token keyword">const</span> sheet <span class="token operator">=</span> <span class="token function">cssomSheet</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">CSSStyleSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sheet <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><blockquote><p>💡 See <a href="./../usage-guides/lit-element.html">Examples - LitElement</a> how this can be used.</p></blockquote><h4 id="void-sheet"><a class="header-anchor" href="#void-sheet" aria-hidden="true">#</a> Void Sheet</h4><blockquote><p>💡 This is the default implementation on server environments.</p></blockquote><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup<span class="token punctuation">,</span> voidSheet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sheet<span class="token operator">:</span> <span class="token function">voidSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="dom-sheet"><a class="header-anchor" href="#dom-sheet" aria-hidden="true">#</a> DOM Sheet</h4><p>A sheet implementation which inserts style rules through the Document Object Model.</p><blockquote><p>💡 This implementation is way slower than the default (<a href="#cssom-sheet">cssomSheet</a>) but may be useful to see the generated CSS right in the DOM. Most modern browser display CSS rules from the speedy default sheet using their CSS inspector.</p></blockquote><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> domSheet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/sheets&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sheet<span class="token operator">:</span> <span class="token function">domSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><blockquote><p>💡 See <a href="/api/modules/twind_sheets.html">twind/sheets</a> for details.</p></blockquote><h4 id="virtual-sheet"><a class="header-anchor" href="#virtual-sheet" aria-hidden="true">#</a> Virtual Sheet</h4><p>A sheet implementation which collects style rules into an array.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> virtualSheet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/sheets&#39;</span>\n\n<span class="token keyword">const</span> sheet <span class="token operator">=</span> <span class="token function">virtualSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sheet <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// An array of all inserted CSS rules</span>\nsheet<span class="token punctuation">.</span>target\n</code></pre></div><h4 id="custom-sheet-implementation"><a class="header-anchor" href="#custom-sheet-implementation" aria-hidden="true">#</a> Custom Sheet Implementation</h4><p>In case the builtin sheet implementations do not solve your use case, you can create your own.</p><h2 id="plugins"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> Plugins</h2><p>The <code>plugins</code> property allows to define new plugins or override core plugins. See <a href="/handbook/plugins.html">plugins</a> for details.</p><h2 id="variants"><a class="header-anchor" href="#variants" aria-hidden="true">#</a> Variants</h2><p>The <code>variants</code> property allows to define new variants or override core variants.</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  variants<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;not-checked&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;:not(:checked)&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',83);c.render=function(o,p,c,r,k,d){return n(),s("div",null,[a("h1",l,[i,t(" "+e(o.$frontmatter.title),1)]),u])};export default c;export{p as __pageData};
