import{o as n,c as s,a,b as t,t as p,e,d as o}from"./app.4ddadaaa.js";const c='{"title":"The Shim","description":"Learn how to use the shim in Twind for seamless integration with Tailwind.","frontmatter":{"title":"The Shim","editLink":true,"navbar":true,"sidebar":true,"head":[["meta",{"name":"description","content":"Learn how to use the shim in Twind for seamless integration with Tailwind."}],["meta",{"name":"keywords","content":"twind tailwind css-in-js"}]]},"headers":[{"level":2,"title":"Basic Usage","slug":"basic-usage"},{"level":2,"title":"Prevent FOUC","slug":"prevent-fouc"},{"level":2,"title":"Support legacy browsers with UMD bundles","slug":"support-legacy-browsers-with-umd-bundles"},{"level":2,"title":"Custom tw instance","slug":"custom-tw-instance"},{"level":2,"title":"Server","slug":"server"},{"level":2,"title":"Asynchronous SSR","slug":"asynchronous-ssr"}],"relativePath":"handbook/the-shim.md","lastUpdated":1623699843608}',l={},u={id:"frontmatter-title"},i=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),r=o('<p>The <code>twind/shim</code> and <code>twind/shim/server</code> modules provides seamless integration with existing Tailwind projects, making refactoring to Twind a breeze.</p><p>The shim works by detecting any Tailwind classes names used in your app and wrap them in <code>tw</code> call under the hood. And since Twind supports all Tailwind utility classes, they will just work in Twind. The shim also supports all of Twind&#39;s extended syntaxes, variants, and rules without any additional configuration. And, it can be used along side the <code>tw</code> function, which allows for gradual migration. Please see the <a href="./../migration-guides/tailwind.html">Tailwind migration guide</a> for more information.</p><h2 id="basic-usage"><a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a> Basic Usage</h2><p>Simply include the <code>twind/shim</code> module and watch the magic happen ✨</p><p><strong>HTML:</strong></p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span> <span class="token attr-name">hidden</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.skypack.dev/twind/shim<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h-screen bg-purple-400 flex items-center justify-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font-bold text(center 5xl white sm:gray-800 md:pink-700)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>This is Twind!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><strong>JavaScript:</strong></p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;twind/shim&#39;</span>\n<span class="token comment">// or</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> setup<span class="token punctuation">,</span> disconnect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/shim&#39;</span>\n</code></pre></div>',8),k=o('<h2 id="prevent-fouc"><a class="header-anchor" href="#prevent-fouc" aria-hidden="true">#</a> Prevent FOUC</h2><p>To prevent FOUC (<em>flash of unstyled content</em>), set the <code>hidden</code> attribute on the target element. <code>twind/shim</code> will remove it once all styles have been generated.</p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span> <span class="token attr-name">hidden</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- ... --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Internally <code>twind/shim</code> uses <code>twind/observe</code>, which may be useful for advanced use cases.</p></div><h2 id="support-legacy-browsers-with-umd-bundles"><a class="header-anchor" href="#support-legacy-browsers-with-umd-bundles" aria-hidden="true">#</a> Support legacy browsers with UMD bundles</h2><blockquote><p>You may need to provide certain <a href="./getting-started.html#supporting-legacy-browsers">polyfills</a> depending on your target browser.</p></blockquote><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/twind/twind.umd.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/twind/observe/observe.umd.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/twind/shim/shim.umd.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>The <code>twind/shim</code> module utilizes the <a href="./../api/modules/twind_observe.html">twind/observe</a> module internally, but it provides its own <a href="./../api/modules/twind_shim.html#setup">setup</a> function for customizing the used tw instance and setting the target node to be shimmed. It also provides a <a href="./../api/modules/twind_shim.html#disconnect">disconnect</a> function to stop shimming/observing all nodes.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup<span class="token punctuation">,</span> disconnect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/shim&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// node element to shim/observe (default: document.documentElement)</span>\n  target<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// All other setup options are supported</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// stop shimming/observing all nodes</span>\n<span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="custom-tw-instance"><a class="header-anchor" href="#custom-tw-instance" aria-hidden="true">#</a> Custom <code>tw</code> instance</h2><p>You can provide a <code>&lt;script type=&quot;twind-config&quot;&gt;...&lt;/script&gt;</code> within the document. The content must be valid JSON and all <a href="./configuration.html">twind setup options</a> (including <a href="./configuration.html#hash">hash</a>) are supported.</p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span> <span class="token attr-name">hidden</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.skypack.dev/twind/shim<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>twind-config<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n      <span class="token punctuation">{</span>\n        <span class="token string">&quot;hash&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h-screen bg-purple-400 flex items-center justify-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text(center 5xl white sm:gray-800 md:pink-700)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        This is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font-bold<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Twind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>!\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>Alternatively the following works:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;https://cdn.skypack.dev/twind/shim&quot;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  target<span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token comment">// Default document.documentElement (eg html)</span>\n  <span class="token operator">...</span> <span class="token comment">// All other twind setup options are supported</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>It is possible to mix <code>twind/shim</code> with <code>tw</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;twind/shim&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> tw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  center<span class="token operator">:</span> tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">flex items-center justify-center</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  &lt;main class=&quot;h-screen bg-purple-400 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styles<span class="token punctuation">.</span>center<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;\n    &lt;h1 class=&quot;font-bold </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text(center 5xl white sm:gray-800 md:pink-700)</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;\n      This is Twind!\n    &lt;/h1&gt;\n  &lt;/main&gt;\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><h2 id="server"><a class="header-anchor" href="#server" aria-hidden="true">#</a> Server</h2><p>If you wish to remove Twind&#39;s runtime overhead or you&#39;re interested in using Twind in a universal or &quot;isomorphic&quot; web app, <code>twind/shim/server</code> exports the dedicated <code>twind/shim/server.shim</code> function for performant processing of static HTML.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You&#39;ll find more details and examples in the <a href="./../usage-guides/ssr.html">ssr</a> guide.</p></div><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> virtualSheet<span class="token punctuation">,</span> getStyleTag<span class="token punctuation">,</span> shim <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/shim/server&#39;</span>\n\n<span class="token keyword">const</span> sheet <span class="token operator">=</span> <span class="token function">virtualSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>sharedOptions<span class="token punctuation">,</span> sheet <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">ssr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 1. Reset the sheet for a new rendering</span>\n  sheet<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 2. Render the app to an html string and handle class attributes</span>\n  <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token function">shim</span><span class="token punctuation">(</span><span class="token function">renderTheApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 3. Create the style tag with all generated CSS rules</span>\n  <span class="token keyword">const</span> styleTag <span class="token operator">=</span> <span class="token function">getStyleTag</span><span class="token punctuation">(</span>sheet<span class="token punctuation">)</span>\n\n  <span class="token comment">// 4. Generate the response html</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;!DOCTYPE html&gt;\n    &lt;html lang=&quot;en&quot;&gt;\n      &lt;head&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styleTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/head&gt;\n      &lt;body&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>body<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/body&gt;\n    &lt;/html&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>In order to prevent harmful code injection on the web, a <a href="https://developer.mozilla.org/docs/Web/HTTP/CSP" target="_blank" rel="noopener noreferrer">Content Security Policy (CSP)</a> may be put in place. During server-side rendering, a cryptographic nonce (number used once) may be embedded when generating a page on demand:</p><div class="language-js"><pre><code><span class="token comment">// ... other code is the same as before ...</span>\n\n<span class="token comment">// Usage with webpack: https://webpack.js.org/guides/csp/</span>\n<span class="token keyword">const</span> styleTag <span class="token operator">=</span> <span class="token function">getStyleTag</span><span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> <span class="token punctuation">{</span> nonce<span class="token operator">:</span> __webpack_nonce__ <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>All Twind syntax features are supported within class attributes.</p><p>The <code>shim</code> function also accepts an optional second argument that can be a custom <code>tw</code> instance or an options object (including <code>tw</code> instance).</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> create <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> shim<span class="token punctuation">,</span> virtualSheet<span class="token punctuation">,</span> getStyleTag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/shim/server&#39;</span>\n\n<span class="token keyword">const</span> sheet <span class="token operator">=</span> <span class="token function">virtualSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> tw <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>sharedOptions<span class="token punctuation">,</span> sheet <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nsheet<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> markup <span class="token operator">=</span> <span class="token function">shim</span><span class="token punctuation">(</span>htmlString<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  tw<span class="token punctuation">,</span> <span class="token comment">// defaults to default `tw` instance</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> styleTag <span class="token operator">=</span> <span class="token function">getStyleTag</span><span class="token punctuation">(</span>sheet<span class="token punctuation">)</span>\n</code></pre></div><h2 id="asynchronous-ssr"><a class="header-anchor" href="#asynchronous-ssr" aria-hidden="true">#</a> Asynchronous SSR</h2><blockquote><p>❗ This is an experimental feature. Use with care and please <a href="https://github.com/tw-in-js/twind/issues/new" target="_blank" rel="noopener noreferrer">report any issue</a> you find. Consider using the synchronous API when ever possible due to the relatively expensive nature of the <a href="https://docs.google.com/document/d/1rda3yKGHimKIhg5YeoAmCOtyURgsbTH_qaYR79FELlk/edit" target="_blank" rel="noopener noreferrer">promise introspection API</a> provided by V8. Async server side rendering is implemented using <a href="https://nodejs.org/docs/latest-v14.x/api/async_hooks.html" target="_blank" rel="noopener noreferrer">async_hooks</a>. Callback-based APIs and event emitters may not work or need special handling.</p></blockquote><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> asyncVirtualSheet<span class="token punctuation">,</span> getStyleTagProperties<span class="token punctuation">,</span> shim <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/server&#39;</span>\n\n<span class="token keyword">const</span> sheet <span class="token operator">=</span> <span class="token function">asyncVirtualSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>sharedOptions<span class="token punctuation">,</span> sheet <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ssr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 1. Reset the sheet for a new rendering</span>\n  sheet<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 2. Render the app to an html string and handle class attributes</span>\n  <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token function">shim</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">renderTheApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 3. Create the style tag with all generated CSS rules</span>\n  <span class="token keyword">const</span> styleTag <span class="token operator">=</span> <span class="token function">getStyleTag</span><span class="token punctuation">(</span>sheet<span class="token punctuation">)</span>\n\n  <span class="token comment">// 4. Generate the response html</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;!DOCTYPE html&gt;\n    &lt;html lang=&quot;en&quot;&gt;\n      &lt;head&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styleTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/head&gt;\n      &lt;body&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>body<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/body&gt;\n    &lt;/html&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div>',28),d=a("hr",null,null,-1);l.render=function(o,c,l,g,h,m){return n(),s("div",null,[a("h1",u,[i,t(" "+p(o.$frontmatter.title),1)]),r,e(" > [live and interactive shim demo 🚀 ](https://esm.codes/#aW1wb3J0ICdodHRwczovL2Nkbi5za3lwYWNrLmRldi90d2luZC9zaGltJwoKZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBgCiAgPG1haW4gY2xhc3M9Imgtc2NyZWVuIGJnLXB1cnBsZS00MDAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIiPgogICAgPGgxIGNsYXNzPSJmb250LWJvbGQgdGV4dChjZW50ZXIgNXhsIHdoaXRlIHNtOmdyYXktODAwIG1kOnBpbmstNzAwKSI+CiAgICAgIFRoaXMgaXMgVHdpbmQhCiAgICA8L2gxPgogIDwvbWFpbj4KYA==) "),k,e(" The shim allows for the use of the `class` attribute for tailwind rules. If such a rule is detected, the corresponding CSS rule is created and injected into the stylesheet dynamically. The default `twind/shim` export is intended for client-side usage and, without configuration, utilizes the default/global `tw` instance. For server-side usage, [`twind/shim/server`](#) exports a dedicated `shim` function that will parse and update a static HTML string while collecting the style rules into a sheet for further usage in your respective framework. "),d])};export default l;export{c as __pageData};
