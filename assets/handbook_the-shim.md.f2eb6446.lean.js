import{o as n,c as s,a,b as t,t as p,e,d as o}from"./app.4ddadaaa.js";const c='{"title":"The Shim","description":"Learn how to use the shim in Twind for seamless integration with Tailwind.","frontmatter":{"title":"The Shim","editLink":true,"navbar":true,"sidebar":true,"head":[["meta",{"name":"description","content":"Learn how to use the shim in Twind for seamless integration with Tailwind."}],["meta",{"name":"keywords","content":"twind tailwind css-in-js"}]]},"headers":[{"level":2,"title":"Basic Usage","slug":"basic-usage"},{"level":2,"title":"Prevent FOUC","slug":"prevent-fouc"},{"level":2,"title":"Support legacy browsers with UMD bundles","slug":"support-legacy-browsers-with-umd-bundles"},{"level":2,"title":"Custom tw instance","slug":"custom-tw-instance"},{"level":2,"title":"Server","slug":"server"},{"level":2,"title":"Asynchronous SSR","slug":"asynchronous-ssr"}],"relativePath":"handbook/the-shim.md","lastUpdated":1623699843608}',l={},u={id:"frontmatter-title"},i=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),r=o('',8),k=o('',28),d=a("hr",null,null,-1);l.render=function(o,c,l,g,h,m){return n(),s("div",null,[a("h1",u,[i,t(" "+p(o.$frontmatter.title),1)]),r,e(" > [live and interactive shim demo ðŸš€ ](https://esm.codes/#aW1wb3J0ICdodHRwczovL2Nkbi5za3lwYWNrLmRldi90d2luZC9zaGltJwoKZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBgCiAgPG1haW4gY2xhc3M9Imgtc2NyZWVuIGJnLXB1cnBsZS00MDAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIiPgogICAgPGgxIGNsYXNzPSJmb250LWJvbGQgdGV4dChjZW50ZXIgNXhsIHdoaXRlIHNtOmdyYXktODAwIG1kOnBpbmstNzAwKSI+CiAgICAgIFRoaXMgaXMgVHdpbmQhCiAgICA8L2gxPgogIDwvbWFpbj4KYA==) "),k,e(" The shim allows for the use of the `class` attribute for tailwind rules. If such a rule is detected, the corresponding CSS rule is created and injected into the stylesheet dynamically. The default `twind/shim` export is intended for client-side usage and, without configuration, utilizes the default/global `tw` instance. For server-side usage, [`twind/shim/server`](#) exports a dedicated `shim` function that will parse and update a static HTML string while collecting the style rules into a sheet for further usage in your respective framework. "),d])};export default l;export{c as __pageData};
