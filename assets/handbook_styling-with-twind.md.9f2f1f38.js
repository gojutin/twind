import{o as n,c as s,a,b as t,t as p,d as o}from"./app.4ddadaaa.js";const e='{"title":"Styling with Twind","description":"How to style your Twind projects with the tw function","frontmatter":{"title":"Styling with Twind","editLink":true,"navbar":true,"sidebar":true,"head":[["meta",{"name":"description","content":"How to style your Twind projects with the tw function"}],["meta",{"name":"keywords","content":"twind tailwind css-in-js"}]]},"headers":[{"level":2,"title":"The tw function","slug":"the-tw-function"},{"level":2,"title":"The apply function","slug":"the-apply-function"}],"relativePath":"handbook/styling-with-twind.md","lastUpdated":1623699843608}',c={},l={id:"frontmatter-title"},i=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),u=o('<h2 id="the-tw-function"><a class="header-anchor" href="#the-tw-function" aria-hidden="true">#</a> The <code>tw</code> function</h2><p>At the heart of Twind is the <code>tw</code> function. This function works by:</p><ul><li>Interpreting and normalizing rules that are provided to it and compiling them into CSS styles</li><li>Injecting those styles into the head of the document</li><li>Returning class name(s) that associate the injected styles to the element</li></ul><p>Take this simple example:</p><div class="language-js"><pre><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p class=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-blue-500</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;Hello twind!&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>The class name of <code>text-blue-500</code> would be returned to the <code>p</code> element&#39;s class attribute and a stylesheet similar to the example below would be injected in the head of the document:</p><div class="language-css"><pre><code><span class="token selector">.text-blue-500</span> <span class="token punctuation">{</span>\n  <span class="token property">--tw-text-opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>59<span class="token punctuation">,</span> 130<span class="token punctuation">,</span> 246<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--tw-text-opacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>The <code>tw</code> function accepts a variety of inputs (inspired heavily by <a href="https://npmjs.com/clsx" target="_blank" rel="noopener noreferrer">clsx</a>):</p><ul><li><p>Template Literal (recommended)</p><div class="language-tsx"><pre><code>tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bg-gray-200 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;rounded&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n</code></pre></div></li><li><p>Objects</p><div class="language-tsx"><pre><code><span class="token function">tw</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&#39;bg-gray-200&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> rounded<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> underline<span class="token operator">:</span> <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>Strings</p><div class="language-tsx"><pre><code><span class="token function">tw</span><span class="token punctuation">(</span><span class="token string">&#39;bg-gray-200&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;rounded&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;underline&#39;</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>Arrays</p><div class="language-tsx"><pre><code><span class="token function">tw</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;bg-gray-200&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;rounded&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;underline&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>Variadic (mixed)</p><div class="language-tsx"><pre><code><span class="token function">tw</span><span class="token punctuation">(</span><span class="token string">&#39;bg-gray-200&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;rounded&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> underline<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;text-black&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;text-lg&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;shadow-lg&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul><p>Falsy values, standalone booleans, and number values are always discarded:</p><div class="language-js"><pre><code><span class="token comment">// Strings</span>\n<span class="token function">tw</span><span class="token punctuation">(</span><span class="token string">&#39;bg-gray-200&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;rounded&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;underline&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">//=&gt; bg-gray-200 rounded underline</span>\n\n<span class="token comment">// Objects</span>\n<span class="token function">tw</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&#39;bg-gray-200&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> rounded<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> underline<span class="token operator">:</span> <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//=&gt; bg-gray-200 underline</span>\n\n<span class="token comment">// Arrays</span>\n<span class="token function">tw</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;bg-gray-200&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;rounded&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">//=&gt; bg-gray-200 rounded</span>\n\n<span class="token comment">// Mixed</span>\n<span class="token function">tw</span><span class="token punctuation">(</span><span class="token string">&#39;bg-gray-200&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;rounded&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> underline<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;text-black&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;text-lg&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;shadow-lg&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">//=&gt; bg-gray-200 rounded text-lg shadow-lg</span>\n</code></pre></div><h2 id="the-apply-function"><a class="header-anchor" href="#the-apply-function" aria-hidden="true">#</a> The <code>apply</code> function</h2><p>The <code>apply</code> function is used to compose styles that can be later be overwritten in a <code>tw</code> call. It&#39;s a companion to the <code>tw</code> function and useful for composition.</p><blockquote><p>💡 <code>apply</code> accepts the same arguments as the <code>tw</code> function</p></blockquote><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The <code>apply</code> function returns a function that must be passed to a <code>tw</code> call before those styles are applied to the document. In other words, the function does nothing outside of a <code>tw</code> call.</p></div><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> apply <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token keyword">const</span> btn <span class="token operator">=</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">inline-block bg-gray-500 text-base</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; generates a CSS class with all declarations of the above rules when used</span>\n\n<span class="token keyword">const</span> btnBlock <span class="token operator">=</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>btn<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> block</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; generates a CSS class with all declarations of btn &amp; block</span>\n\n<span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span>tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>btn<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>gray<span class="token operator">-</span><span class="token number">500</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n<span class="token comment">// =&gt; tw-XXXXX</span>\n\n<span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span>tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>btn<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bg-red-500 text-lg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>red<span class="token operator">-</span><span class="token number">500</span> large<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n<span class="token comment">// =&gt; tw-XXXX bg-red-500 text-lg</span>\n\n<span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span>tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>btnBlock<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>block button<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n<span class="token comment">// =&gt; tw-YYYY</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Another way to extract common component styles is by using <a href="/handbook/plugins.html">plugins</a>.</p></div><p>The <code>apply</code> function allows you to use Twind rules and utility classes to define your preflight styles:</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  preflight<span class="token operator">:</span> <span class="token punctuation">{</span>\n    body<span class="token operator">:</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&#39;bg-gray-900 text-white&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>The <code>css</code> function can be used with the <code>apply</code> function to define additional styles:</p><div class="language-js"><pre><code><span class="token keyword">const</span> btn <span class="token operator">=</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  py-2 px-4\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    borderColor<span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>The <code>apply</code> function can be used within the <code>css</code> function:</p><div class="language-js"><pre><code><span class="token keyword">const</span> prose <span class="token operator">=</span> <span class="token function">css</span><span class="token punctuation">(</span>\n  apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-gray-700 dark:text-gray-300</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    p<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my-5</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    h1<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-black dark:text-white</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    h1<span class="token operator">:</span> <span class="token punctuation">{</span>\n      fontWeight<span class="token operator">:</span> <span class="token string">&#39;800&#39;</span><span class="token punctuation">,</span>\n      fontSize<span class="token operator">:</span> <span class="token string">&#39;2.25em&#39;</span><span class="token punctuation">,</span>\n      marginTop<span class="token operator">:</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span>\n      marginBottom<span class="token operator">:</span> <span class="token string">&#39;0.8888889em&#39;</span><span class="token punctuation">,</span>\n      lineHeight<span class="token operator">:</span> <span class="token string">&#39;1.1111111&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p>Using template literal syntax:</p><div class="language-js"><pre><code><span class="token keyword">const</span> prose <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-gray-700 dark:text-gray-300</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n\n  p {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my-5</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n\n  h1 {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-black dark:text-white</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    font-weight: 800;\n    font-size: 2.25em;\n    margin-top: 0;\n    margin-bottom: 0.8888889em;\n    line-height: 1.1111111;\n  }\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>Using Tailwind directives with <code>animation</code> function from the <code>twind/css</code> module:</p><div class="language-js"><pre><code><span class="token keyword">const</span> motion <span class="token operator">=</span> <span class="token function">animation</span><span class="token punctuation">(</span><span class="token string">&#39;.6s ease-in-out infinite&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;0%&#39;</span><span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">scale-100</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token string">&#39;50%&#39;</span><span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">scale-125 rotate-45</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token string">&#39;100%&#39;</span><span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">scale-100 rotate-0</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> bounce <span class="token operator">=</span> <span class="token function">animation</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;1s ease infinite&#39;</span><span class="token punctuation">,</span>\n  keyframes<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  from, 20%, 53%, 80%, to {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu translate-x-0</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n  40%, 43% {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu -translate-x-7</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n  70% {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu -translate-x-3.5</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  },\n  90% {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu -translate-x-1</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p>A React button component</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> tw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token keyword">const</span> variantMap <span class="token operator">=</span> <span class="token punctuation">{</span>\n  success<span class="token operator">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span>\n  primary<span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>\n  warning<span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span>\n  info<span class="token operator">:</span> <span class="token string">&#39;gray&#39;</span><span class="token punctuation">,</span>\n  danger<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> sizeMap <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sm<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-xs py(2 md:1) px-2</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  md<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-sm py(3 md:2) px-2</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  lg<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-lg py-2 px-4</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  xl<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-xl py-3 px-6</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> baseStyles <span class="token operator">=</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  w(full md:auto)\n  text(sm white uppercase)\n  px-4\n  border-none\n  transition-colors\n  duration-300\n</span><span class="token template-punctuation string">`</span></span>\n\n<span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  size <span class="token operator">=</span> <span class="token string">&#39;md&#39;</span><span class="token punctuation">,</span>\n  variant <span class="token operator">=</span> <span class="token string">&#39;primary&#39;</span><span class="token punctuation">,</span>\n  round <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  className<span class="token punctuation">,</span>\n  children<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Collect all styles into one class</span>\n  <span class="token keyword">const</span> instanceStyles <span class="token operator">=</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseStyles<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    bg-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>variantMap<span class="token punctuation">[</span>variant<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(600 700(hover:&amp; focus:&amp;)))\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sizeMap<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    rounded-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>round <span class="token operator">?</span> <span class="token string">&#39;full&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;lg&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>disabled <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;bg-gray-400 text-gray-100 cursor-not-allowed&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  </span><span class="token template-punctuation string">`</span></span>\n\n  <span class="token comment">// Allow passed classNames to override instance styles</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">tw</span><span class="token punctuation">(</span>instanceStyles<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Button variant<span class="token operator">=</span><span class="token string">&quot;info&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;text-lg rounded-md&quot;</span><span class="token operator">&gt;</span>\n    Click me\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre></div>',29);c.render=function(o,e,c,r,k,g){return n(),s("div",null,[a("h1",l,[i,t(" "+p(o.$frontmatter.title),1)]),u])};export default c;export{e as __pageData};
