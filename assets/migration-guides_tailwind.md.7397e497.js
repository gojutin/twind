import{o as n,c as s,a,b as t,t as o,d as p}from"./app.4ddadaaa.js";const e='{"title":"Migrate from Tailwind","description":"A guide on how to migrate your Tailwind app to Twind","frontmatter":{"title":"Migrate from Tailwind","editLink":true,"navbar":true,"sidebar":true,"head":[["meta",{"name":"description","content":"A guide on how to migrate your Tailwind app to Twind"}],["meta",{"name":"keywords","content":"twind tailwind css-in-js"}]]},"headers":[{"level":3,"title":"Start with the Shim","slug":"start-with-the-shim"},{"level":3,"title":"Migrate your Tailwind theme configuration","slug":"migrate-your-tailwind-theme-configuration"},{"level":3,"title":"Wrap your classes in tw calls","slug":"wrap-your-classes-in-tw-calls"},{"level":3,"title":"Move away from PostCSS","slug":"move-away-from-postcss"}],"relativePath":"migration-guides/tailwind.md","lastUpdated":1623699843608}',c={},i={id:"frontmatter-title"},r=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),l=p('<h3 id="start-with-the-shim"><a class="header-anchor" href="#start-with-the-shim" aria-hidden="true">#</a> Start with the Shim</h3><p>The easiest way to migrate your existing Tailwind app to Twind is by using <a href="#link-to-shim">the Shim</a>.</p><p>The Shim will automagically convert all of your Tailwind classes to Twind, and even pick up on your custom Tailwind theme configuration simply by importing the shim into your project:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;twind/shim&#39;</span>\n</code></pre></div><p>Example: <code>class=&quot;text-blue-500 font-bold&quot;</code> becomes <code>class=`${tw`text-blue-500 font-bold&quot;`}</code></p><p>While the shim is a good starting point, it is recommended that you eventually move your project away from using the shim. In order to do so, you will need to do a few things:</p><h3 id="migrate-your-tailwind-theme-configuration"><a class="header-anchor" href="#migrate-your-tailwind-theme-configuration" aria-hidden="true">#</a> Migrate your Tailwind theme configuration</h3><p>If your Tailwind project uses a custom theme configuration (<code>tailwind.config.js</code>), you will want to move things like your custom colors to your Twind configuration using the <code>setup</code> function. The <code>setup</code> function accepts a configuration object that looks very similiar to a Tailwind config with a few differences.</p><p>Here is a example of a Tailwind configuration file and it&#39;s Twind equivalent:</p><p>Tailwind</p><div class="language-js"><pre><code><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;tailwindcss/colors&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    colors<span class="token operator">:</span> <span class="token punctuation">{</span>\n      gray<span class="token operator">:</span> colors<span class="token punctuation">.</span>coolGray<span class="token punctuation">,</span>\n      blue<span class="token operator">:</span> colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span>\n      red<span class="token operator">:</span> colors<span class="token punctuation">.</span>rose<span class="token punctuation">,</span>\n      pink<span class="token operator">:</span> colors<span class="token punctuation">.</span>fuchsia<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    fontFamily<span class="token operator">:</span> <span class="token punctuation">{</span>\n      sans<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Graphik&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sans-serif&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      serif<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Merriweather&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;serif&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n      spacing<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token number">128</span><span class="token operator">:</span> <span class="token string">&#39;32rem&#39;</span><span class="token punctuation">,</span>\n        <span class="token number">144</span><span class="token operator">:</span> <span class="token string">&#39;36rem&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      borderRadius<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;4xl&#39;</span><span class="token operator">:</span> <span class="token string">&#39;2rem&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  variants<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n      borderColor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;focus-visible&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      opacity<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;disabled&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Twind</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> colors <span class="token keyword">from</span> <span class="token string">&#39;twind/colors&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    colors<span class="token operator">:</span> <span class="token punctuation">{</span>\n      gray<span class="token operator">:</span> colors<span class="token punctuation">.</span>coolGray<span class="token punctuation">,</span>\n      blue<span class="token operator">:</span> colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span>\n      red<span class="token operator">:</span> colors<span class="token punctuation">.</span>rose<span class="token punctuation">,</span>\n      pink<span class="token operator">:</span> colors<span class="token punctuation">.</span>fuchsia<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    fontFamily<span class="token operator">:</span> <span class="token punctuation">{</span>\n      sans<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Graphik&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sans-serif&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      serif<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Merriweather&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;serif&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n      spacing<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token number">128</span><span class="token operator">:</span> <span class="token string">&#39;32rem&#39;</span><span class="token punctuation">,</span>\n        <span class="token number">144</span><span class="token operator">:</span> <span class="token string">&#39;36rem&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      borderRadius<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;4xl&#39;</span><span class="token operator">:</span> <span class="token string">&#39;2rem&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// There is no need to include the variants section Twind supports all variants plus more with no additional configuration required</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><a href="https://twind.dev/docs/handbook/advanced/setup.html" target="_blank" rel="noopener noreferrer">Check out the docs</a> on the <code>setup</code> function for more configuration options like preflight, dark mode, and hashing.</p><h3 id="wrap-your-classes-in-tw-calls"><a class="header-anchor" href="#wrap-your-classes-in-tw-calls" aria-hidden="true">#</a> Wrap your classes in <code>tw</code> calls</h3><p>Example: <code>class=&quot;text-blue-500 font-bold&quot;</code> becomes <code>class=`${tw`text-blue-500 font-bold&quot;`}</code></p><h3 id="move-away-from-postcss"><a class="header-anchor" href="#move-away-from-postcss" aria-hidden="true">#</a> Move away from PostCSS</h3><p>Your project might be using a custom PostCSS configuration if you are either:</p><ul><li>using an older version of Tailwind</li><li>Using PostCSS plugins like purge or autoprefixer</li></ul><p>Once you&#39;ve converted all your existing Tailwind to Twind, you can remove all things PostCSS. Seriously, you don&#39;t need PostCSS or any PostCSS plugins with Twind. Since styles are generated at runtime, there is nothing to purge and Twind takes care of autoprefixing.</p>',20);c.render=function(p,e,c,u,k,d){return n(),s("div",null,[a("h1",i,[r,t(" "+o(p.$frontmatter.title),1)]),l])};export default c;export{e as __pageData};
