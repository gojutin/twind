import{o as n,c as s,a,b as t,t as e,d as o}from"./app.4ddadaaa.js";const p='{"title":"Use with SSR","description":"How to use Twind with server-rendered apps (SSR)","frontmatter":{"title":"Use with SSR","editLink":true,"navbar":true,"sidebar":true,"head":[["meta",{"name":"description","content":"How to use Twind with server-rendered apps (SSR)"}],["meta",{"name":"keywords","content":"twind tailwind css-in-js"}]]},"relativePath":"usage-guides/ssr.md","lastUpdated":1623699843612}',c={},r={id:"frontmatter-title"},i=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),l=o('<h4 id="static-extraction-a-k-a-server-side-rendering"><a class="header-anchor" href="#static-extraction-a-k-a-server-side-rendering" aria-hidden="true">#</a> Static Extraction a.k.a. Server Side Rendering</h4><p>Twind supports static extraction a.k.a. Server Side Rendering (SSR) out of the box.</p><h4 id="synchronous-ssr"><a class="header-anchor" href="#synchronous-ssr" aria-hidden="true">#</a> Synchronous SSR</h4><p>The following example assumes your app is using the <code>tw</code> named export from <code>twind</code> but the same logic can be applied to custom instances.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> virtualSheet<span class="token punctuation">,</span> getStyleTag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/sheets&#39;</span>\n\n<span class="token keyword">const</span> sheet <span class="token operator">=</span> <span class="token function">virtualSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>sharedOptions<span class="token punctuation">,</span> sheet <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">ssr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 1. Reset the sheet for a new rendering</span>\n  sheet<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 2. Render the app</span>\n  <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token function">renderTheApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 3. Create the style tag with all generated CSS rules</span>\n  <span class="token keyword">const</span> styleTag <span class="token operator">=</span> <span class="token function">getStyleTag</span><span class="token punctuation">(</span>sheet<span class="token punctuation">)</span>\n\n  <span class="token comment">// 4. Generate the response html</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;!DOCTYPE html&gt;\n    &lt;html lang=&quot;en&quot;&gt;\n      &lt;head&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styleTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/head&gt;\n      &lt;body&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>body<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/body&gt;\n    &lt;/html&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>In order to prevent harmful code injection on the web, a <a href="https://developer.mozilla.org/docs/Web/HTTP/CSP" target="_blank" rel="noopener noreferrer">Content Security Policy (CSP)</a> may be put in place. During server-side rendering, a cryptographic nonce (number used once) may be embedded when generating a page on demand:</p><div class="language-js"><pre><code><span class="token comment">// ... other code is the same as before ...</span>\n\n<span class="token comment">// Usage with webpack: https://webpack.js.org/guides/csp/</span>\n<span class="token keyword">const</span> styleTag <span class="token operator">=</span> <span class="token function">getStyleTag</span><span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> <span class="token punctuation">{</span> nonce<span class="token operator">:</span> __webpack_nonce__ <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="asynchronous-ssr"><a class="header-anchor" href="#asynchronous-ssr" aria-hidden="true">#</a> Asynchronous SSR</h4><blockquote><p>❗ Please note the <code>twind/server</code> bundle is Node.JS only. ❗ This is an experimental feature and only supported for Node.JS &gt;=12. care and please <a href="https://github.com/tw-in-js/twind/issues/new" target="_blank" rel="noopener noreferrer">report any issue</a> you find. Consider using the synchronous API when ever possible due to the relatively expensive nature of the <a href="https://docs.google.com/document/d/1rda3yKGHimKIhg5YeoAmCOtyURgsbTH_qaYR79FELlk/edit" target="_blank" rel="noopener noreferrer">promise introspection API</a> provided by V8. Async server side rendering is implemented using <a href="https://nodejs.org/docs/latest-v14.x/api/async_hooks.html" target="_blank" rel="noopener noreferrer">async_hooks</a>. Callback-based APIs and event emitters may not work or need special handling.</p></blockquote><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> asyncVirtualSheet<span class="token punctuation">,</span> getStyleTag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/server&#39;</span>\n\n<span class="token keyword">const</span> sheet <span class="token operator">=</span> <span class="token function">asyncVirtualSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>sharedOptions<span class="token punctuation">,</span> sheet <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ssr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 1. Reset the sheet for a new rendering</span>\n  sheet<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 2. Render the app</span>\n  <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">renderTheApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 3. Create the style tag with all generated CSS rules</span>\n  <span class="token keyword">const</span> styleTag <span class="token operator">=</span> <span class="token function">getStyleTag</span><span class="token punctuation">(</span>sheet<span class="token punctuation">)</span>\n\n  <span class="token comment">// 4. Generate the response html</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;!DOCTYPE html&gt;\n    &lt;html lang=&quot;en&quot;&gt;\n      &lt;head&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styleTag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/head&gt;\n      &lt;body&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>body<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/body&gt;\n    &lt;/html&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="streaming-ssr"><a class="header-anchor" href="#streaming-ssr" aria-hidden="true">#</a> Streaming SSR</h4><blockquote><p>Supporting ReactDOM.renderToNodeStream and Vue.renderToStream is still on the roadmap...</p></blockquote>',12);c.render=function(o,p,c,u,k,d){return n(),s("div",null,[a("h1",r,[i,t(" "+e(o.$frontmatter.title),1)]),l])};export default c;export{p as __pageData};
