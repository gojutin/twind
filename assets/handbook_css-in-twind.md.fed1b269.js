import{o as n,c as s,a,b as t,t as p,d as o}from"./app.4ddadaaa.js";const e='{"title":"CSS in Twind","description":"How to write CSS in your Twind project.","frontmatter":{"title":"CSS in Twind","editLink":true,"navbar":true,"sidebar":true,"head":[["meta",{"name":"description","content":"How to write CSS in your Twind project."}],["meta",{"name":"keywords","content":"twind tailwind css-in-js"}]]},"headers":[{"level":2,"title":"The css function","slug":"the-css-function"},{"level":2,"title":"The theme function","slug":"the-theme-function"},{"level":2,"title":"The screen function","slug":"the-screen-function"},{"level":2,"title":"The animation function","slug":"the-animation-function"},{"level":2,"title":"The keyframes function","slug":"the-keyframes-function"},{"level":2,"title":"Global styles","slug":"global-styles"}],"relativePath":"handbook/css-in-twind.md","lastUpdated":1623699843608}',c={},l={id:"frontmatter-title"},i=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),u=o('<p><code>twind/css</code> provides a set of utilities that allow you to write arbitrary CSS within Twind with support for global styles, animations, and more.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It is recommended to try to stay within the constraints of the Twind rules when possible. Applying arbitrary CSS should be generally be viewed as an escape hatch.</p></div><h2 id="the-css-function"><a class="header-anchor" href="#the-css-function" aria-hidden="true">#</a> The <code>css</code> function</h2><p>This function allows you to write CSS within Twind and provides support for global styling.</p><p>You can use the <code>&amp;</code> selector to target the current element much like in other CSS-in-JS libraries:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> tw<span class="token punctuation">,</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token function">tw</span><span class="token punctuation">(</span>\n  <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;&amp;::before&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;&quot;üôÅ&quot;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;&amp;::after&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;&quot;üòä&quot;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n<span class="token comment">// =&gt; tw-xxxx</span>\n</code></pre></div><p>For optimal performance, it is advised to extract your <code>css</code> function call into a variable:</p><div class="language-js"><pre><code><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;&amp;::before&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;&quot;üôÅ&quot;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;&amp;::after&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;&quot;üòä&quot;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">tw</span><span class="token punctuation">(</span>styles<span class="token punctuation">)</span>\n<span class="token comment">// =&gt; tw-xxxx</span>\n</code></pre></div><p>Any variants or groupings that are active when the <code>css</code> function is called will be respected by the return value. This means that you can scope a <code>css</code> call with every variant:</p><div class="language-js"><pre><code>tw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  sm:hover:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;&amp;::before&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;&quot;üôÅ&quot;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;&amp;::after&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;&quot;üòä&quot;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// =&gt; sm:hover:tw-xxxx</span>\n</code></pre></div><p>Values within the CSS object can be functions which are called with the context and should return the value to be used:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> theme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// .tw-xxx a</span>\n  a<span class="token operator">:</span> <span class="token punctuation">{</span>\n    color<span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.blue.500&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token comment">// .tw-xxx a:hover</span>\n    <span class="token string">&#39;&amp;:hover&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.blue.700&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Tagged template literal syntax works like in emotion, goober or styled-components:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> apply<span class="token punctuation">,</span> theme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token keyword">const</span> style <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  color: rebeccapurple;\n  background-color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.gray.500&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;\n  &amp;:hover {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-purple-700</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><blockquote><p>‚ùó Please note that the template literal syntax has a little performance impact as Twind needs to parse the CSS. For optimal performance use the object notation.</p></blockquote><p>Variadic arguments and arrays (nested as deep as you like) are supported as well:</p><div class="language-js"><pre><code><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token function">css</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    backgroundColor<span class="token operator">:</span> <span class="token string">&#39;hotpink&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;&amp;:hover&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token string">&#39;darkgreen&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    color<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    backgroundColor<span class="token operator">:</span> <span class="token string">&#39;hotpink&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;&amp;:hover&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token string">&#39;darkgreen&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    color<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p><code>apply</code> can be used within <code>css</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> apply <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token function">css</span><span class="token punctuation">(</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-gray(700 dark:300)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  p<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my-5</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  h1<span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text(black dark:white hover:purple-500)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Or using template literals</span>\ncss<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-gray(700 dark:300)</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n\n  p {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&#39;my-5&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n\n  h1 {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text(black dark:white hover:purple-500)</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>For convenience, Twind provides the <code>@apply</code> CSS rule:</p><div class="language-js"><pre><code>css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  @apply text-gray(700 dark:300);\n\n  p {\n    @apply my-5;\n  }\n\n  h1 {\n    @apply text(black dark:white hover:purple-500);\n  }\n</span><span class="token template-punctuation string">`</span></span>\n\ncss<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  @apply </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">[</span><span class="token string">&#39;font-bold&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;underline&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;py-2 px-4&#39;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;\n  color: fuchsia;\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p><code>@apply</code> can be used in the object notation as well:</p><div class="language-js"><pre><code><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;@apply&#39;</span><span class="token operator">:</span> <span class="token string">&#39;font-bold py-2 px-4 underline&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// &#39;@apply&#39;: [&#39;font-bold py-2 px-4&#39;, false &amp;&amp; underline&#39;],</span>\n  color<span class="token operator">:</span> <span class="token string">&#39;fuchsia&#39;</span><span class="token punctuation">,</span>\n  transform<span class="token operator">:</span> <span class="token string">&#39;translateY(-1px)&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="the-theme-function"><a class="header-anchor" href="#the-theme-function" aria-hidden="true">#</a> The <code>theme</code> function</h2><p>This function can be used to access theme values inside of a <code>css</code> function call.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> theme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  color<span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.blue.500&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;&amp;:hover&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    color<span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.blue.700&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token punctuation">{</span>\n    color<span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.blue.500&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token comment">// .tw-xxx a:hover</span>\n    <span class="token string">&#39;&amp;:hover&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.blue.700&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="the-screen-function"><a class="header-anchor" href="#the-screen-function" aria-hidden="true">#</a> The <code>screen</code> function</h2><p>This function allows you to create media queries that reference your Twind breakpoints by name (<code>sm</code>,<code>md</code>, etc.).</p><p>For example, say you have a <code>sm</code> breakpoint at <code>640px</code> and you need to write some custom CSS that references this breakpoint.</p><p>Instead of writing a raw media query that duplicates that value like this:</p><div class="language-js"><pre><code>css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  @media (min-width: 640px) {\n    /* ... */\n  }\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>...you can use the <code>screen</code> function and reference the breakpoint by name:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> apply <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token comment">// With template literal</span>\ncss<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">&#39;sm&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> {\n    /* ... */\n  }\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">&#39;md&#39;</span><span class="token punctuation">,</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> /* ... */ </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">&#39;lg&#39;</span><span class="token punctuation">,</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">&#39;xl&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">&#39;2xl&#39;</span><span class="token punctuation">,</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> ... </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span>\n\n<span class="token comment">// With object notation</span>\n<span class="token function">css</span><span class="token punctuation">(</span>\n  <span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">&#39;md&#39;</span><span class="token punctuation">,</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> /* ... */ </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">&#39;lg&#39;</span><span class="token punctuation">,</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">&#39;xl&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">&#39;2xl&#39;</span><span class="token punctuation">,</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> ... </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n`\n</code></pre></div><p>For convenience, Twind provides the <code>@screen</code> CSS rule:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> apply <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token comment">// With template literal</span>\ncss<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  @screen sm {\n    /* ... */\n  }\n</span><span class="token template-punctuation string">`</span></span>\n\n<span class="token comment">// With object notation</span>\n<span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;@screen md&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n`\n</code></pre></div><h2 id="the-animation-function"><a class="header-anchor" href="#the-animation-function" aria-hidden="true">#</a> The <code>animation</code> function</h2><p>This function provides a simplified abstraction for creating custom animations within a <code>css</code> function call.</p><p>Custom animations are difficult to configure in Tailwind. During <code>setup</code> you need to add to the <code>theme.animation</code> section and the <code>theme.keyframes</code> section. This means all animations must known before hand and you can not use &quot;one-off&quot; animations.</p><p>With the <code>animation</code> exports, this task is greatly simplified:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> animation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token keyword">const</span> bounce <span class="token operator">=</span> <span class="token function">animation</span><span class="token punctuation">(</span><span class="token string">&#39;1s ease infinite&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;from, 20%, 53%, 80%, to&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    transform<span class="token operator">:</span> <span class="token string">&#39;translate3d(0,0,0)&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;40%, 43%&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    transform<span class="token operator">:</span> <span class="token string">&#39;translate3d(0, -30px, 0)&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;70%&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    transform<span class="token operator">:</span> <span class="token string">&#39;translate3d(0, -15px, 0)&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;90%&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    transform<span class="token operator">:</span> <span class="token string">&#39;translate3d(0, -4px, 0)&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ntw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hover:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bounce<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>Template literal syntax is supported as well:</p><div class="language-js"><pre><code><span class="token keyword">const</span> bounce <span class="token operator">=</span> <span class="token function">animation</span><span class="token punctuation">(</span><span class="token string">&#39;1s ease infinite&#39;</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  from, 20%, 53%, 80%, to {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu translate-x-0</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n  40%, 43% {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu -translate-x-7</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n  70% {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu -translate-x-3.5</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  },\n  90% {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu -translate-x-1</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>The first argument can be a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation" target="_blank" rel="noopener noreferrer">animation shorthand CSS</a> string, an object of CSS animation properties or a function which is passed the context to return the shorthand CSS:</p><div class="language-js"><pre><code><span class="token keyword">const</span> slidein <span class="token operator">=</span> <span class="token function">animation</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;durations.500&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;transitionTimingFunction.in-out&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">from</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      transform<span class="token operator">:</span> <span class="token string">&#39;translateX(0%)&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    to<span class="token operator">:</span> <span class="token punctuation">{</span>\n      transform<span class="token operator">:</span> <span class="token string">&#39;translateX(100%)&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> theme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n\n<span class="token keyword">const</span> bounce <span class="token operator">=</span> <span class="token function">animation</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    animationDuration<span class="token operator">:</span> <span class="token string">&#39;1s&#39;</span><span class="token punctuation">,</span>\n    animationTimingFunction<span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;transitionTimingFunction.in-out&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    animationIterationCount<span class="token operator">:</span> <span class="token string">&#39;infinite&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">/* keyframes */</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p>The second parameter are the waypoints of a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes" target="_blank" rel="noopener noreferrer">@keyframes</a> at-rule in CSS object format. The <a href="#keyframes-helper">keyframes helper</a> can be used the create waypoints.</p><p>The result of <code>animation</code> can be used within <code>css</code>:</p><div class="language-js"><pre><code><span class="token function">css</span><span class="token punctuation">(</span>bounce<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* other properties */</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ncss<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bounce<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><h2 id="the-keyframes-function"><a class="header-anchor" href="#the-keyframes-function" aria-hidden="true">#</a> The <code>keyframes</code> function</h2><p>This function provides a simple way to define <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes" target="_blank" rel="noopener noreferrer">keyframes</a> for use within an <code>animation</code> function call.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> keyframes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token keyword">const</span> bounce <span class="token operator">=</span> <span class="token function">keyframes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;from, 20%, 53%, 80%, to&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    transform<span class="token operator">:</span> <span class="token string">&#39;translate3d(0,0,0)&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;40%, 43%&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    transform<span class="token operator">:</span> <span class="token string">&#39;translate3d(0, -30px, 0)&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;70%&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    transform<span class="token operator">:</span> <span class="token string">&#39;translate3d(0, -15px, 0)&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;90%&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    transform<span class="token operator">:</span> <span class="token string">&#39;translate3d(0, -4px, 0)&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Template literal syntax is supported as well:</p><div class="language-js"><pre><code><span class="token keyword">const</span> bounce <span class="token operator">=</span> keyframes<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  from, 20%, 53%, 80%, to {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu translate-x-0</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n  40%, 43% {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu -translate-x-7</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n  70% {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu -translate-x-3.5</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  },\n  90% {\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform-gpu -translate-x-1</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  }\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>The returned values can be used like this:</p><div class="language-js"><pre><code><span class="token comment">// As second parameter for animation</span>\n<span class="token function">animation</span><span class="token punctuation">(</span><span class="token string">&#39;1s ease infinite&#39;</span><span class="token punctuation">,</span> bounce<span class="token punctuation">)</span>\n\n<span class="token comment">// Within CSS functions</span>\n<span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  animation<span class="token operator">:</span> <span class="token string">&#39;1s ease infinite&#39;</span><span class="token punctuation">,</span>\n  animationName<span class="token operator">:</span> bounce<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="global-styles"><a class="header-anchor" href="#global-styles" aria-hidden="true">#</a> Global styles</h2><p>The <code>css</code> function provided by the <code>twind/css</code> module provides an easy way to inject global styles into your app using the <code>:global</code> selector.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> tw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token keyword">const</span> globalStyles <span class="token operator">=</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;:global&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token string">&#39;#333&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n&lt;div class=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">tw</span><span class="token punctuation">(</span>globalStyles<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;\n&lt;h1&gt;Hello Twind!&lt;/h1&gt;\n&lt;p&gt;\n  Look\n  &lt;a href=&quot;https://twind.dev&quot;&gt;here&lt;/a&gt;\n  for more info about Twind.\n&lt;/p&gt;\n&lt;/div&gt;\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>You can use the <code>theme</code> function to apply theme values, the <code>apply</code> function to apply Twind classes, and much more.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> tw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> apply<span class="token punctuation">,</span> theme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;twind/css&#39;</span>\n\n<span class="token keyword">const</span> globalStyles <span class="token operator">=</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;:global&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">&#39;colors.blue.500&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;&amp;:hover&#39;</span><span class="token operator">:</span> apply<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text-blue-700</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n&lt;div class=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">tw</span><span class="token punctuation">(</span>globalStyles<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;\n&lt;h1&gt;Hello Twind!&lt;/h1&gt;\n&lt;p&gt;s\n  Look\n  &lt;a href=&quot;https://twind.dev&quot;&gt;here&lt;/a&gt;\n  for more info about Twind.\n&lt;/p&gt;\n&lt;/div&gt;\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>You have the full power of the <code>twind/css</code> module when writing global styles. This approach also allows you to inject global styles anywhere in your app, which is useful for multi-page apps.</p>',60);c.render=function(o,e,c,r,k,d){return n(),s("div",null,[a("h1",l,[i,t(" "+p(o.$frontmatter.title),1)]),u])};export default c;export{e as __pageData};
